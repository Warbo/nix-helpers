# Augment the environment for a derivation by allowing Nix commands to be
# called inside the build process

{ attrsToDirs, bash, isBroken, lib, nix, nixpkgs1709,
  nix-daemon-tunnel-socket ? "/var/lib/nix-daemon-tunnel/socket", openssh,
  runCommand, wrap }:

with builtins;
with lib;
with rec {
  wrapper = cmd: wrap {
    name   = "cmd-wrapped";
    paths  = [ bash nix openssh ];
    vars   = {
      NIX_REMOTE = "unix://${nix-daemon-tunnel-socket}";
      warn       = warn false;
    };
    script = ''
      #!/usr/bin/env bash
      set -e

      [[ -e "${nix-daemon-tunnel-socket}" ]] || {
        echo "$warn" 1>&2
        exit 1
      }
      "${cmd}" "$@"
    '';
  };

  warn = evalTime: with { default = "/nix/var/nix/daemon-socket/socket"; };
     ''
      WARNING: Nix 2.x disabled recursive Nix, so we're using a hacky workaround
      where recursive connections to nix-daemon (i.e. those coming from nixbld
      users) are sent to a different socket instead, and an SSH tunnel passes
      them on to the real nix-daemon socket as a different user.

      This tunnel socket should be at the path '${nix-daemon-tunnel-socket}',
      which can be overridden by defining 'nix-daemon-tunnel-socket' in your Nix
      config (overlays, packageOverrides, etc.). You are seeing this message
      because ${if evalTime
                   then ''
                     the 'withNix' Nix expression checked for the existence of
                     this socket during evaluation and it didn't exist. Note
                     that any build scripts using 'withNix' will fail (with this
                     same warning) unless this socket is created.''
                   else ''
                     a wrapper script generated by 'withNix' (used in place of
                     'nix-build', 'nix-store', etc. to ensure the tunnel is
                     used) checked for the existence of this socket before
                     attempting to connect and it didn't exist. This wrapper
                     script will now abort.''}

      There are two ways you can make this extra socket. To just make a one-off
      socket you can run a command like the following from your normal user
      account (assuming that nix-daemon is using a socket at ${default}):

          ssh -nNT -L "${nix-daemon-tunnel-socket}":${default} "$USER"@localhost
          chmod 0666 "${nix-daemon-tunnel-socket}"

      You may need to use 'sudo' to create and chmod this file. Keep this tunnel
      running while you perform Nix commands that need 'withNix'. Note that it's
      using SSH to log in as yourself, so it assumes that (a) your system/user
      can initiate SSH connections and (b) your user is able to log in via SSH.

      The alternative, which is more automated but potentially more invasive, is
      to provide this socket via a NixOS system service. The nix-config project
      at http://chriswarbo.net/git/nix-config provides such a service in its
      nixos/modules/nix-daemon-tunnel.nix file (if it's no longer there, try
      looking in the project's git history; it may be that the workaround is no
      longer needed, and Nix versions which require it are now obsolete).

      If you use the system service, note that the tunnel won't be available the
      first time you use 'nixos-rebuild' to evaluate and build the new system
      configuration. If your configuration relies on 'withNix', e.g. for
      building a system package, you can use the "manual" commands above to make
      the rebuild work then kill those commands in favour of the system service.
    '';

  wrappedNix =
    (if pathExists nix-daemon-tunnel-socket then (x: x) else trace (warn true))
    attrsToDirs {
      bin = genAttrs [ "nix-build" "nix-instantiate" "nix-shell" "nix-store" ]
                     wrapper;
    };

  vars = {
    NIX_PATH    = if getEnv "NIX_PATH" == ""
                     then "nixpkgs=${<nixpkgs>}"
                     else getEnv "NIX_PATH";
    NIX_REMOTE  = if getEnv "NIX_REMOTE" == ""
                     then "daemon"
                     else getEnv "NIX_REMOTE";
  };

  needWorkaround = compareVersions nixVersion "2" != -1;

  go = attrs: vars // attrs // {
    buildInputs = (attrs.buildInputs or []) ++ [
      (if needWorkaround then wrappedNix else (nix.out or nix))
    ];
  };
};
{
  def   = go;
  tests = (if needWorkaround then {
    workaroundStillNeeded = isBroken (runCommand "withNix-workaround-needed"
      (vars // { buildInputs = [ (nix.out or nix) ]; })
      ''
        nix-build -E '(import <nixpkgs> {}).hello'
        mkdir "$out"
      '');
  } else {}) // {
    canEvalNumbers = runCommand "withNix-can-eval-number" (go {}) ''
      X=$(nix-instantiate --eval -E '1 + 2')
      [[ "$X" -eq 3 ]] || {
        echo "Expected 3, got '$X'" 1>&2
        exit 1
      }
      mkdir "$out"
    '';
    canEvalDerivations = runCommand "withNix-can-eval-derivation" (go {}) ''
      X=$(nix-instantiate --eval -E '(import <nixpkgs> {}).hello') || {
        echo "$X" 1>&2
        exit 1
      }
      mkdir "$out"
    '';
    canInstantiate = runCommand "withNix-can-instantiate" (go {}) ''
      unset NIX_LOG_FD
      nix-instantiate -E '(import <nixpkgs> {}).hello'
      mkdir "$out"
    '';
    canRealise = runCommand "withNix-can-realise" (go {}) ''
      DRV=$(nix-instantiate -E '(import <nixpkgs> {}).hello') || {
        echo "$DRV" 1>&2
        exit 1
      }
      nix-store --realise "$DRV"
      mkdir "$out"
    '';
    canShell = runCommand "withNix-can-shell" (go {}) ''
      X=$(nix-shell -p hello --run 'echo 42') || {
        echo "$X" 1>&2
        exit 1
      }
      [[ "$X" -eq 42 ]] || {
        echo "Expected 42 got '$X'" 1>&2
        exit 1
      }
      mkdir "$out"
    '';
    canBuildHello = runCommand "withNix-can-build-hello" (go {}) ''
      nix-build --show-trace --no-out-link -E 'with import <nixpkgs> {}; hello'
      mkdir "$out"
    '';
    canAccessFiles = runCommand "withNix-can-access-files" (go {}) ''
      echo "<nixpkgs>" > ./test.nix
      nix-build --show-trace -E '(import (import ./test.nix) {}).hello'
      mkdir "$out"
    '';
  };
}
